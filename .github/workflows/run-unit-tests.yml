name: Unit tests

on:

  push:

    branches:
      - main

    paths:
      - 'radiant_mlhub/**'
      - setup.py
      - pyproject.toml
      - 'test/**'
      - '.github/workflows/run-unit-tests.yml'

  pull_request:

    branches:
      - main
      - new-api

    paths:
      - 'radiant_mlhub/**'
      - setup.py
      - pyproject.toml
      - 'test/**'
      - '.github/workflows/run-unit-tests.yml'

jobs:

  test:

    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        exclude:
          - python-version: "3.10"
            os: windows-latest

    runs-on: ${{ matrix.os }}

    steps:

      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{matrix.python-version }}

      - name: Cache test dependencies (Linux)
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: unit-tests-${{ matrix.os }}-python${{ matrix.python-version }}-${{ hashFiles('requirements_testing.txt') }}
          
      - name: Cache test dependencies (Mac)
        uses: actions/cache@v2
        if: startsWith(runner.os, 'macOS')
        with:
          path: ~/Library/Caches/pip
          key: unit-tests-${{ matrix.os }}-python${{ matrix.python-version }}-${{ hashFiles('requirements_testing.txt') }}

      - name: Cache test dependencies (Windows)
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Windows')
        with:
          path: ~\AppData\Local\pip\Cache
          key: unit-tests-${{ matrix.os }}-python${{ matrix.python-version }}-${{ hashFiles('requirements_testing.txt') }}

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_testing.txt

      - name: Run tests
        run: |
          pip install .
          pytest --record-mode once --block-network
          flake8
          flake8_nb examples/
          mypy radiant_mlhub
